#!/bin/sh
# Copyright (c) 2013-2015 UnSX Team
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# some needed options
shopt -s nullglob

# red message
function aos_rmsg()
{
	echo -e "\e[1;31m[${1}] \e[0m${2}"
}

# green message
function aos_gmsg()
{
	echo -e "\e[1;32m[${1}] \e[0m${2}"
}

# set compiler flags
function aos_cflags()
{
	for f in "$@"
	do
		CFLAGS=( "${CFLAGS[@]}" "$f" )
	done
}

# set linker flags
function aos_lflags()
{
	for f in "$@"
	do
		LFLAGS=( "${LFLAGS[@]}" "$f" )
	done
}

# add packages
function aos_pkg()
{
	for pkg in "$@"
	do
		! "${PKGCONF}" --exists "$pkg" &&
		aos_rmsg "AOS" "Package \"$pkg\" not found" &&
		exit 1
	done
	aos_cflags $("${PKGCONF}" --cflags $@)
	aos_lflags $("${PKGCONF}" --libs $@)
}

# set compiler
function aos_compiler()
{
	! which "$1" >/dev/null &&
	aos_rmsg "AOS" "Compiler \"$1\" not found" &&
	exit 1
	CC="$1"
	LN="$1"
}

# set linker
function aos_linker()
{
	! which "$1" >/dev/null &&
	aos_rmsg "AOS" "Linker \"$1\" not found" &&
	exit 1
	LN="$1"
}

# set pkgconfig
function aos_pkgconfig()
{
	! which "$1" >/dev/null &&
	aos_rmsg "AOS" "pkg-config \"$1\" not found" &&
	exit 1
	PKGCONF="$1"

}

# set resulting binary
function aos_bin()
{
	BIN="$1"
}

# add source files
function aos_src()
{
	[ -z $1 ] && return
	for f in "$@"
	do
		SRC=( "${SRC[@]}" "${f}" )
		SRCO=( "${SRCO[@]}" "${f%%.c}.o" )
	done
}

# check if compilation is needed
function aos_objchk()
{
	[ -n "$FORCE" ] && return 1
	[ ! -e "$2" ] && return 1
	[ $(stat -c %Y "$1") -le $(stat -c %Y "$2") ] && return 0
	return 1
}

# check if link is needed
function aos_binchk()
{
	[ -n "$FORCE" ] && return 1
	[ ! -e $BIN ] && return 1
	[ -n "$CHANGED" ] && return 1
	return 0
}

# compile one file
function aos_cc()
{
	aos_objchk "$1" "$2" && return
	CHANGED=0
	aos_gmsg "CC" "$(basename "$1") -> $(basename "$2")"
	$CC ${CFLAGS[@]} -c -o "$2" "$1" && return
	aos_rmsg "AOS" "Errors occured when building"
	exit 1
}

# final link
function aos_link()
{
	aos_binchk && return
	aos_gmsg "CC" "$BIN"
	$CC -o "$BIN" ${SRCO[@]} ${LFLAGS[@]} && return
	aos_rmsg "AOS" "Errors occured when linking"
	exit 1
}

# delete a file
function aos_rm()
{
	[ -e "$1" ] && aos_gmsg "RM" "$(basename "$1")" && rm "$1"
}

# clean up
function aos_clean()
{
	[ -z "$SRC" ] && aos_rmsg "AOS" "No source files" && exit 1
	for f in "${SRCO[@]}"
	do
		aos_rm "$f"
	done
	[ -n "$CLEANALL" ] && aos_rm "$BIN"
	exit 0
}

# build everything
function aos_build()
{
	[ -z "$SRC" ] && aos_rmsg "AOS" "No source files" && exit 1
	for f in "${SRC[@]}"
	do
		aos_cc "$f" "${f%%.c}.o"
	done
	aos_link
	exit 0
}

# entry point
function aos_main()
{
	[ -z $1 ] && aos_build
	case "$1" in
		veryclean)
			CLEANALL=0
			aos_clean
			;;
		clean)
			aos_clean
			;;
		force)
			FORCE=0
			aos_build
			;;
	esac
	echo "usage: ./build [veryclean|clean|force]"
	exit 0
}
